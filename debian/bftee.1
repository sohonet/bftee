.TH BFTEE 1 "July 2025" "bftee 1.0" "User Commands"
.SH NAME
bftee \- non-blocking tee for FIFOs
.SH SYNOPSIS
.B bftee
.I fifo_path
.RI [ buffer_size ]
.br
.B bftee
.RB { \-h | \-\-help }
.SH DESCRIPTION
.B bftee
is a specialized version of the standard
.B tee
command designed to work efficiently with FIFOs (named pipes). Unlike regular
.BR tee ,
it won't block when the pipe reader is slow or disconnected. It reads from stdin and writes to both stdout and a named pipe, with internal buffering to handle slow readers gracefully.
.SH OPTIONS
.TP
.BR \-h ", " \-\-help
Display help information and exit.
.TP
.I fifo_path
Path to the named pipe (FIFO) to write to. The FIFO must be created before running bftee.
.TP
.I buffer_size
Optional. Number of buffers to use for internal buffering (default: 4096). Each buffer is 2KB, providing 8MB of total buffer space by default.
.SH SIGNALS
.TP
.B SIGUSR1
Display buffer statistics to stderr, including current usage, maximum usage, and drop count.
Format: "Buffer use: active (max/total), STDOUT: writes PIPE: writes:drops"
.TP
.B SIGTERM
Graceful shutdown with buffer flush to minimize data loss.
.TP
.B SIGINT
First signal initiates graceful shutdown, second signal forces immediate exit.
.TP
.B SIGPIPE
Ignored to handle disconnected FIFO readers gracefully.
.SH EXAMPLES
.TP
Create a FIFO and use bftee:
.B mkfifo /tmp/output.fifo
.br
.B someprog 2>&1 | bftee /tmp/output.fifo
.TP
Use custom buffer size:
.B someprog 2>&1 | bftee /tmp/output.fifo 8192
.TP
Check buffer statistics during runtime:
.B kill -USR1 $(pidof bftee)
.TP
Display help information:
.B bftee --help
.br
.B bftee -h
.TP
Real-world logging example:
.B mkfifo /var/log/app.fifo
.br
.B ./myapp 2>&1 | bftee /var/log/app.fifo &
.br
.B tail -f /var/log/app.fifo > /var/log/app.log &
.SH NOTES
.SS Buffer Management
.B bftee
uses a circular buffer system to handle situations where the FIFO reader is slower than the writer or temporarily disconnected. When the buffer fills up, older data is dropped to make room for new data, and the drop count is tracked.
.PP
The buffer size parameter controls the number of 2KB buffers allocated. The default of 4096 buffers provides 8MB of buffering capacity. Increase this value if you expect long periods of slow or disconnected readers.
.SS Platform Differences
On Linux systems,
.B bftee
uses fcntl() to dynamically change the FIFO to blocking mode during shutdown to ensure buffer flushing. On macOS, FIFO behavior differs slightly, particularly regarding buffer flushing.
.SS Performance Considerations
.B bftee
is designed for efficiency with minimal system calls in the hot path. It uses non-blocking I/O for FIFO writes and blocking I/O for stdout to ensure data integrity. All buffer allocation is done at startup to avoid runtime allocation overhead.
.SS Error Handling
When the FIFO becomes unavailable (e.g., no reader connected),
.B bftee
continues to buffer data and periodically attempts to reconnect. Data is never lost to stdout, but may be dropped from the FIFO if the buffer overflows.
.SH EXIT STATUS
.B bftee
returns 0 on success, non-zero on error.
.SH BUGS
Partial writes to the FIFO during shutdown are not fully handled and may result in incomplete data transfer in edge cases.
.PP
The program assumes that stdout writes smaller than 4KB are atomic on Linux systems. This may not hold true on all platforms or with very large buffer sizes.
.PP
Report bugs to the project repository or maintainer.
.SH AUTHOR
Originally developed by racic and enhanced by fabraxias from Stack Overflow.
.SH LICENSE
WTFPL (Do What The Fuck You Want To Public License)
.SH SEE ALSO
.BR tee (1),
.BR mkfifo (1),
.BR fifo (7),
.BR fcntl (2),
.BR signal (7),
.BR pipe (2)